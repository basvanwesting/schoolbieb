table.hover.unstriped.condensed.text-left
  tbody
    tr
      th = Book.human_attribute_name(:state)
      td = Book.human_attribute_name("state.#{@book.state}")
    tr
      th = Book.human_attribute_name(:sti_type)
      td = @book.class.model_name.human
    tr
      th = Author.model_name.human
      td = link_to @book.author.description, @book.author
    tr
      th = Book.human_attribute_name(:id)
      td = @book.id.to_s.rjust(4,'0')
    tr
      th = Book.human_attribute_name(:titel)
      td = @book.title
    tr
      th = Book.human_attribute_name(:series)
      td = @book.series
    tr
      th = Book.human_attribute_name(:part)
      td = @book.part
    tr
      th = Book.human_attribute_name(:reading_level)
      td = @book.reading_level
    tr
      th = Book.human_attribute_name(:avi_level)
      td = @book.avi_level
    tr
      th = Book.human_attribute_name(:sticker_pending)
      td = t(@book.sticker_pending)

- if @book.may_borrow? && can?(:create, BookUseCase::Borrow)
  = link_to BookUseCase::Borrow.model_name.human, new_book_use_case_borrow_path(book_use_case_borrow: { book_id: @book.id }), class: 'button warning'
- if @book.may_return? && can?(:create, BookUseCase::Return)
  = link_to BookUseCase::Return.model_name.human, new_book_use_case_return_path(book_use_case_return: { book_id: @book.id }), class: 'button success'
- if @book.may_enable? && can?(:create, BookUseCase::Enable)
  = link_to BookUseCase::Enable.model_name.human, book_use_case_enables_path(book_use_case_enable: { book_id: @book.id }), method: :post, class: 'button success'
- if @book.may_disable? && can?(:create, BookUseCase::Disable)
  = link_to BookUseCase::Disable.model_name.human, book_use_case_disables_path(book_use_case_disable: { book_id: @book.id }), method: :post, class: 'button alert'

br
- if can? :update, @book
  = link_to t('button.edit'), edit_polymorphic_path(@book), class: 'button warning'
- if can? :destroy, @book
  = link_to t('button.destroy'), @book, data: { confirm: 'Are you sure?' }, method: :delete, class: 'button alert'
- if @book.sticker_pending && can?(:update, @book)
  = link_to t('button.unset_sticker_pending'), unset_sticker_pending_book_path(@book), method: :post, class: 'button'
- elsif can? :update, @book
  = link_to t('button.set_sticker_pending'), set_sticker_pending_book_path(@book), method: :post, class: 'button'
= link_to t('button.back'), :back, class: 'button secondary'

br
- if can? :create, Book::Fiction
  = link_to t('action.new', model: Book::Fiction.model_name.human), new_book_fiction_path, class: 'button'
  = link_to t('button.add', add_model: Book::Fiction.model_name.human, to_model: Author.model_name.human), new_book_fiction_path(book: { author_id: @book.author_id }), class: 'button'
  = link_to t('button.add', add_model: Book::Fiction.model_name.human, to_model: Book.human_attribute_name(:series)), new_book_fiction_path(book: @book.attributes.slice(*%w[author_id series reading_level avi_level])), class: 'button'
  = link_to t('button.clone'), new_book_fiction_path(book: @book.attributes.slice(*%w[author_id title series part reading_level avi_level])), class: 'button'

br
- if can? :create, Book::NonFiction
  = link_to t('action.new', model: Book::NonFiction.model_name.human), new_book_non_fiction_path, class: 'button'
