= simple_form_for @book, as: :book do |f|
  = f.error_notification
  = f.error_notification message: [Author.model_name.human, f.object.errors[:author].to_sentence].join(' ') if f.object.errors[:author].present?
  = f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present?

  .form-inputs data-controller="book-form"
    datalist#titles data-target="book-form.titleList"
    datalist#series data-target="book-form.seriesList"
    datalist#authors data-target="book-form.authorList"

    /= f.association :author, label_method: :full_name, value_method: :id, include_blank: true, input_html: { class: 'js-select2', data: { 'minimum-input-length': 2 } }
    = f.input :author_id, required: true, as: :hidden, input_html: { data: { target: 'book-form.authorId' } }
    = f.input :author_full_name, required: true, input_html: { list: :authors, data: { target: 'book-form.authorFullName', action: 'input->book-form#debouncedInputAuthor' } }

    = f.input :title, input_html: { list: :titles, data: { target: 'book-form.title', action: 'input->book-form#debouncedInputTitle' } }
    = f.input :series, input_html: { list: :series, data: { target: 'book-form.series', action: 'input->book-form#debouncedInputSeries' } }
    = f.input :part
    = f.input :reading_level, collection: Book::ReadingLevels::ALL
    = f.input :avi_level, collection: Book::AviLevels::ALL

  .form-actions
    = f.button :submit, class: 'button'
    = link_to t('action.new', model: Author.model_name.human), new_author_path, class: 'button'
    = link_to t('button.cancel'), :back, class: 'button secondary'
