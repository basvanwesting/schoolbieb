h1 = t('action.index', models: Book.model_name.human(count: 2))

= inline_search_form_for @q do |f|
  .grid-x
    .cell.medium-4
      = link_to t('action.new', model: Book::Fiction.model_name.human), new_book_fiction_path, class: 'button'
      = link_to t('action.new', model: Book::NonFiction.model_name.human), new_book_non_fiction_path, class: 'button'
      = f.submit class: 'button', style: "display: none;"
      = f.submit 'Download as CSV',
        formaction: books_path(format: 'csv'),
        class: 'button',
        data: { disable_with: false }
    .cell.medium-8
      = f.input :id_book_wildcard,
        placeholder: t( \
          'placeholder.wildcard', \
          attributes: [ \
            Book.human_attribute_name(:title), \
            Book.human_attribute_name(:series), \
            Author.model_name.human, \
            Book.human_attribute_name(:category), \
            Book.human_attribute_name(:reading_level) \
          ].to_sentence \
        )

  table
    thead
      tr
        th = sort_link(@q, :state,    Book.human_attribute_name(:state))
        th = sort_link(@q, :id,       Book.human_attribute_name(:id))
        th = sort_link(@q, :sti_type, Book.human_attribute_name(:sti_type))
        th = sort_link(@q, :title,    Book.human_attribute_name(:title))
        th = sort_link(@q, :series,   Book.human_attribute_name(:series))
        th = sort_link(@q, :part,     Book.human_attribute_name(:part))
        th = link_to Author.model_name.human, '#'
        th = sort_link(@q, :category,        Book.human_attribute_name(:category))
        th = sort_link(@q, :reading_level,   Book.human_attribute_name(:reading_level))
        th = sort_link(@q, :avi_level,       Book.human_attribute_name(:avi_level))
        th = sort_link(@q, :sticker_pending, Book.human_attribute_name(:sticker_pending))
        th.actions
          i.fas.fa-search
          = search_result_info(@books)
      = search_row do
        th = f.input :state_eq, collection: Book.aasm.states.map { |s| [Book.human_attribute_name("state.#{s}"), s] }, include_blank: ' - '
        th = f.input :id_eq,                 placeholder: t('placeholder.eq')
        th = f.input :sti_type_eq, collection: Book.classes.map { |k| [k.model_name.human, k.name] }, include_blank: ' - '
        th = f.input :title_cont,            placeholder: t('placeholder.cont')
        th = f.input :series_cont,           placeholder: t('placeholder.cont')
        th = f.input :part_eq,               placeholder: t('placeholder.eq')
        th = f.input :author_last_name_cont, placeholder: "#{Author.human_attribute_name(:last_name)} #{t('placeholder.cont')}"
        th = f.input :category_eq,      collection: Book::NonFiction::Categories::ALL,  include_blank: ' - '
        th = f.input :reading_level_eq, collection: Book::ReadingLevels::ALL,           include_blank: ' - '
        th = f.input :avi_level_eq,     collection: Book::AviLevels::ALL,               include_blank: ' - '
        th = f.input :sticker_pending_eq, collection: [true,false].map { |v| [t(v), v] }, include_blank: ' - '
        th.actions= f.submit_search_form

    tbody
      - @books.each do |book|
        tr
          td = Book.human_attribute_name("state.#{book.state}")
          td = book.id.to_s.rjust(4,'0')
          td = book.class.model_name.human
          td = book.title
          td = book.series
          td = book.part
          td = book.author_description
          td = category_with_icon(book.category)
          td = book.reading_level
          td = book.avi_level
          td = t(book.sticker_pending)
          td.actions
            = link_to t('button.show'), book, class: 'button tiny'
            = link_to t('button.edit'), edit_polymorphic_path(book), class: 'button warning warning tiny'
            = link_to t('button.destroy'), book, data: { confirm: 'Are you sure?' }, method: :delete, class: 'button alert tiny'
            - if book.may_borrow?
              = link_to Lending::Borrow.model_name.human, new_lending_borrow_path(lending_borrow: { book_id: book.id }), class: 'button tiny'
            - if book.may_return?
              = link_to Lending::Return.model_name.human, new_lending_return_path(lending_return: { book_id: book.id }), class: 'button tiny'

br
= paginate @books
= link_to t('action.new', model: Book::Fiction.model_name.human), new_book_fiction_path, class: 'button'
= link_to t('action.new', model: Book::NonFiction.model_name.human), new_book_non_fiction_path, class: 'button'
